PackageManifest subclass: #ManifestManifestCore	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Manifest-Core-Manifest'!!ManifestManifestCore commentStamp: '' prior: 0!Support for package Manifest creation!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestManifestCore class	instanceVariableNames: ''!!ManifestManifestCore class methodsFor: 'meta data'!ruleBadMessageRuleV1FalsePositive^ #(#(#(#RGMethodDefinition #(#TheManifestBuilder #hasTruePositiveOf:version: #false)) #'2013-02-01T15:29:51.978000008+01:00') #(#(#RGMethodDefinition #(#TheManifestBuilder #hasFalsePositiveOf:version: #false)) #'2013-02-01T15:29:51.978000006+01:00') #(#(#RGMethodDefinition #(#TheManifestBuilder #rejectRules #false)) #'2013-02-01T15:29:51.978000007+01:00') #(#(#RGMethodDefinition #(#TheManifestBuilder #hasToDoOf:version: #false)) #'2013-02-01T15:29:51.978000005+01:00') )! !!ManifestManifestCore class methodsFor: 'meta data'!ruleContainsRuleV1FalsePositive^ #(#(#(#RGMethodDefinition #(#TheManifestBuilder #commentOfFalsePositive:onRule:version: #false)) #'2013-02-01T15:29:52.876+01:00') #(#(#RGMethodDefinition #(#TheManifestBuilder #commentOfToDo:onRule:version: #false)) #'2013-02-01T15:29:52.876000001+01:00') #(#(#RGMethodDefinition #(#SmalllintManifestChecker #criticsOf: #false)) #'2013-02-08T16:35:58.019+01:00') )! !!ManifestManifestCore class methodsFor: 'meta data'!ruleEquivalentSuperclassMethodsRuleV1FalsePositive^ #(#(#(#RGMethodDefinition #(#'RBEqualNotUsedRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000004+01:00') #(#(#RGMethodDefinition #(#'RBEndTrueFalseRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000018+01:00') #(#(#RGMethodDefinition #(#'RBBlockLintRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000009+01:00') #(#(#RGMethodDefinition #(#'RBDetectContainsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000036+01:00') #(#(#RGMethodDefinition #(#'RBMethodModifierSuperRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000029+01:00') #(#(#RGMethodDefinition #(#'RBExcessiveArgumentsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000001+01:00') #(#(#RGMethodDefinition #(#'RBVariableNotDefinedRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000007+01:00') #(#(#RGMethodDefinition #(#'RBVariableAssignedLiteralRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000009+01:00') #(#(#RGMethodDefinition #(#'RBDetectIfNoneRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000028+01:00') #(#(#RGMethodDefinition #(#'RBPlatformDependentUserInteractionRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000006+01:00') #(#(#RGMethodDefinition #(#'RBMissingSuperSendsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000048+01:00') #(#(#RGMethodDefinition #(#'RBOnlyReadOrWrittenVariableRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000005+01:00') #(#(#RGMethodDefinition #(#'RBMinMaxRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.465000002+01:00') #(#(#RGMethodDefinition #(#'RBAbstractClassRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000051+01:00') #(#(#RGMethodDefinition #(#'RBUnoptimizedAndOrRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000019+01:00') #(#(#RGMethodDefinition #(#'RBMethodModifierFinalRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000053+01:00') #(#(#RGMethodDefinition #(#'RBUsesAddRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000011+01:00') #(#(#RGMethodDefinition #(#'RBUnclassifiedMethodsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000024+01:00') #(#(#RGMethodDefinition #(#'RBEquivalentSuperclassMethodsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.465000001+01:00') #(#(#RGMethodDefinition #(#'RBBooleanPrecedenceRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000005+01:00') #(#(#RGMethodDefinition #(#'RBReturnsBooleanAndOtherRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000017+01:00') #(#(#RGMethodDefinition #(#'RBLongMethodsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000035+01:00') #(#(#RGMethodDefinition #(#'RBCascadedNextPutAllsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000007+01:00') #(#(#RGMethodDefinition #(#'RBReturnsIfTrueRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000002+01:00') #(#(#RGMethodDefinition #(#'RBInstVarInSubclassesRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.46000004+01:00') #(#(#RGMethodDefinition #(#'RBSearchingLiteralRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000062+01:00') #(#(#RGMethodDefinition #(#'RBContainsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000016+01:00') #(#(#RGMethodDefinition #(#'RBAssignmentInIfTrueRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000012+01:00') #(#(#RGMethodDefinition #(#'RBTransformationRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000057+01:00') #(#(#RGMethodDefinition #(#'RBJustSendsSuperRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000015+01:00') #(#(#RGMethodDefinition #(#'RBSentNotImplementedRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000045+01:00') #(#(#RGMethodDefinition #(#'RBAssignmentWithoutEffectRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000025+01:00') #(#(#RGMethodDefinition #(#'RBExcessiveVariablesRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000016+01:00') #(#(#RGMethodDefinition #(#'RBGuardingClauseRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000043+01:00') #(#(#RGMethodDefinition #(#'RBVariableReferencedOnceRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000024+01:00') #(#(#RGMethodDefinition #(#'RBMethodSourceContainsLinefeedsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.46000005+01:00') #(#(#RGMethodDefinition #(#'RBExtraBlockRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000012+01:00') #(#(#RGMethodDefinition #(#'RBGuardClauseRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000009+01:00') #(#(#RGMethodDefinition #(#'RBExcessiveMethodsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000026+01:00') #(#(#RGMethodDefinition #(#'RBUnpackagedCodeRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000054+01:00') #(#(#RGMethodDefinition #(#'RBUnwindBlocksRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000003+01:00') #(#(#RGMethodDefinition #(#'RBUndeclaredReferenceRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000041+01:00') #(#(#RGMethodDefinition #(#'RBMissingSubclassResponsibilityRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000055+01:00') #(#(#RGMethodDefinition #(#'RBSubclassResponsibilityNotDefinedRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000014+01:00') #(#(#RGMethodDefinition #(#'RBParseTreeLintRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000022+01:00') #(#(#RGMethodDefinition #(#'RBEqualsTrueRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000059+01:00') #(#(#RGMethodDefinition #(#'RBLiteralArrayCharactersRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000063+01:00') #(#(#RGMethodDefinition #(#'RBTempVarOverridesInstVarRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.46000003+01:00') #(#(#RGMethodDefinition #(#'RBPrecedenceRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000064+01:00') #(#(#RGMethodDefinition #(#'RBSizeCheckRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.465+01:00') #(#(#RGMethodDefinition #(#'RBNotEliminationRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000025+01:00') #(#(#RGMethodDefinition #(#'RBUnconditionalRecursionRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000017+01:00') #(#(#RGMethodDefinition #(#'RBTemporaryVariableCapitalizationRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.45800002+01:00') #(#(#RGMethodDefinition #(#'RBAtIfAbsentRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000049+01:00') #(#(#RGMethodDefinition #(#'RBSendsDifferentSuperRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000065+01:00') #(#(#RGMethodDefinition #(#'RBEmptyExceptionHandlerRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463+01:00') #(#(#RGMethodDefinition #(#'RBCollectSelectNotUsedRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.45800003+01:00') #(#(#RGMethodDefinition #(#'RBToDoWithIncrementRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.46000006+01:00') #(#(#RGMethodDefinition #(#'RBIfTrueBlocksRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000061+01:00') #(#(#RGMethodDefinition #(#'RBAddRemoveDependentsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000031+01:00') #(#(#RGMethodDefinition #(#'RBTempsReadBeforeWrittenRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000027+01:00') #(#(#RGMethodDefinition #(#'RBExcessiveInheritanceRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000006+01:00') #(#(#RGMethodDefinition #(#'RBModifiesCollectionRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000023+01:00') #(#(#RGMethodDefinition #(#'RBBadMessageRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000001+01:00') #(#(#RGMethodDefinition #(#'RBNoClassCommentRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000013+01:00') #(#(#RGMethodDefinition #(#'RBUnnecessaryAssignmentRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000015+01:00') #(#(#RGMethodDefinition #(#'RBCollectionProtocolRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000028+01:00') #(#(#RGMethodDefinition #(#'RBStringConcatenationRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000008+01:00') #(#(#RGMethodDefinition #(#'RBThreeElementPointRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000026+01:00') #(#(#RGMethodDefinition #(#'RBTranslateLiteralsInMenusRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000013+01:00') #(#(#RGMethodDefinition #(#'RBOverridesSpecialMessageRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000031+01:00') #(#(#RGMethodDefinition #(#'RBToDoRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000037+01:00') #(#(#RGMethodDefinition #(#'RBSuperSendsNewRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000039+01:00') #(#(#RGMethodDefinition #(#'RBClassNotReferencedRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000008+01:00') #(#(#RGMethodDefinition #(#'RBOnlyReadOrWrittenTemporaryRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000058+01:00') #(#(#RGMethodDefinition #(#'RBYourselfNotUsedRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000015+01:00') #(#(#RGMethodDefinition #(#'RBUnreferencedVariablesRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000046+01:00') #(#(#RGMethodDefinition #(#'RBAssignmentInBlockRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.46+01:00') #(#(#RGMethodDefinition #(#'RBReturnInEnsureRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000018+01:00') #(#(#RGMethodDefinition #(#'RBAllAnyNoneSatisfyRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000021+01:00') #(#(#RGMethodDefinition #(#'RBIfTrueReturnsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000044+01:00') #(#(#RGMethodDefinition #(#'RBUsesTrueRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000012+01:00') #(#(#RGMethodDefinition #(#'RBMethodHasNoTimeStampRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000004+01:00') #(#(#RGMethodDefinition #(#'RBImplementedNotSentRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000006+01:00') #(#(#RGMethodDefinition #(#'RBRefersToClassRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.46000001+01:00') #(#(#RGMethodDefinition #(#'RBCompositeLintRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000003+01:00') #(#(#RGMethodDefinition #(#'RBInstanceVariableCapitalizationRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000032+01:00') #(#(#RGMethodDefinition #(#'RBClassNameInSelectorRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000011+01:00') #(#(#RGMethodDefinition #(#'RBMissingTranslationsInMenusRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000003+01:00') #(#(#RGMethodDefinition #(#'RBBasicLintRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000004+01:00') #(#(#RGMethodDefinition #(#'RBFileBlocksRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.46000002+01:00') #(#(#RGMethodDefinition #(#'RBClassVariableCapitalizationRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000008+01:00') #(#(#RGMethodDefinition #(#'RBBetweenAndRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000002+01:00') #(#(#RGMethodDefinition #(#'RBSendsDeprecatedMethodToGlobalRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000038+01:00') #(#(#RGMethodDefinition #(#'RBCollectionMessagesToExternalObjectRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.46300001+01:00') #(#(#RGMethodDefinition #(#'RBCollectionCopyEmptyRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000014+01:00') #(#(#RGMethodDefinition #(#'RBUnoptimizedToDoRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000027+01:00') #(#(#RGMethodDefinition #(#'RBInconsistentMethodClassificationRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000021+01:00') #(#(#RGMethodDefinition #(#'RBLiteralArrayContainsSuspiciousTrueFalseOrNilRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000019+01:00') #(#(#RGMethodDefinition #(#'RBFloatEqualityComparisonRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000023+01:00') #(#(#RGMethodDefinition #(#'RBLiteralArrayContainsCommaRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000022+01:00') #(#(#RGMethodDefinition #(#'RBUnderscoreAssignmentRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000018+01:00') #(#(#RGMethodDefinition #(#'RBMissingYourselfRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000029+01:00') #(#(#RGMethodDefinition #(#'RBWhileTrueRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.45800001+01:00') #(#(#RGMethodDefinition #(#'RBLawOfDemeterRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000005+01:00') #(#(#RGMethodDefinition #(#'RBToDoCollectRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000034+01:00') #(#(#RGMethodDefinition #(#'RBAsOrderedCollectionNotNeededRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000017+01:00') #(#(#RGMethodDefinition #(#'RBMethodModifierOverrideRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000047+01:00') #(#(#RGMethodDefinition #(#'RBUtilityMethodsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000052+01:00') #(#(#RGMethodDefinition #(#'RBSuperSendsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000056+01:00') #(#(#RGMethodDefinition #(#'RBEqualNilRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000042+01:00') #(#(#RGMethodDefinition #(#'RBConsistencyCheckRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000011+01:00') #(#(#RGMethodDefinition #(#'RBDefinesEqualNotHashRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000013+01:00') #(#(#RGMethodDefinition #(#'RBCodeCruftLeftInMethodsRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.458000007+01:00') #(#(#RGMethodDefinition #(#'RBUncommonMessageSendRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.460000033+01:00') #(#(#RGMethodDefinition #(#'RBClassInstVarNotInitializedRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000014+01:00') #(#(#RGMethodDefinition #(#'RBSendsUnknownMessageToGlobalRule class' #identifierMinorVersionNumber #true)) #'2013-02-01T15:29:56.463000016+01:00') )! !!ManifestManifestCore class methodsFor: 'meta data'!ruleClassNotReferencedRuleV1FalsePositive^ #(#(#(#RGClassDefinition #(#RBRemoveAssignmentWithoutEffectRule)) #'2013-03-22T15:13:33.961+01:00') )! !!ManifestManifestCore class methodsFor: 'meta data'!ruleCodeCruftLeftInMethodsRuleV1TODO^ #(#(#(#RGMethodDefinition #(#TheManifestBuilder #hash #false)) #'2013-02-06T15:08:33.234+01:00') )! !!ManifestManifestCore class methodsFor: 'meta data'!ruleSentNotImplementedRuleV1FalsePositive^ #(#(#(#RGMethodDefinition #(#ClassDescription #criticNameOn: #false)) #'2013-03-22T11:32:46.828+01:00') )! !!ManifestManifestCore class methodsFor: 'meta data'!ruleImplementedNotSentRuleV1FalsePositive^ #(#(#(#RGMethodDefinition #(#TheManifestBuilder #addTruePositive:of:version: #false)) #'2013-02-01T15:29:52.678000007+01:00') #(#(#RGMethodDefinition #(#SmalllintManifestChecker #isTruePositive:forRuleId:versionId: #false)) #'2013-02-01T15:29:52.678000011+01:00') #(#(#RGMethodDefinition #(#TheManifestBuilder #removeManifestOf: #false)) #'2013-02-01T15:29:52.678000012+01:00') #(#(#RGMethodDefinition #(#TheManifestBuilder #dateOfToDo:onRule:version: #false)) #'2013-02-01T15:29:52.678000013+01:00') #(#(#RGMethodDefinition #(#TheManifestBuilder #dateOfTruePositive:onRule:version: #false)) #'2013-02-01T15:29:52.67800001+01:00') #(#(#RGMethodDefinition #(#TheManifestBuilder #removeAllManifest #false)) #'2013-02-01T15:29:52.678000006+01:00') #(#(#RGMethodDefinition #(#'RBLintRule class' #uniqueIdentifierNumber #true)) #'2013-02-01T15:29:52.678000008+01:00') #(#(#RGMethodDefinition #(#TheManifestBuilder #installTruePositiveOf:version: #false)) #'2013-02-01T15:29:52.678000009+01:00') )! !!ManifestManifestCore class methodsFor: 'meta data'!ruleConsistencyCheckRuleV1FalsePositive^ #(#(#(#RGMethodDefinition #(#TheManifestBuilder #addItem:wihtComment:selector: #false)) #'2013-02-01T15:29:51.672000001+01:00') #(#(#RGMethodDefinition #(#'RGMetaclassDefinition class' #manifestReadOn: #true)) #'2013-02-01T15:29:51.672000002+01:00') #(#(#RGMethodDefinition #(#'RGMethodDefinition class' #manifestReadOn: #true)) #'2013-02-01T15:29:51.672000003+01:00') )! !!ManifestManifestCore class methodsFor: 'meta data'!rejectRules^ #('LawOfDemeterRule' 'MethodHasNoTimeStampRule')! !RBSmalllintChecker subclass: #SmalllintManifestChecker	instanceVariableNames: 'manifestClassCache'	classVariableNames: ''	poolDictionaries: ''	category: 'Manifest-Core-Base'!!SmalllintManifestChecker commentStamp: '' prior: 0!SmalllintManifestChecker is responsible for running a set of rules on a given subsystem.| rules checker | rules := RBCompositeLintRule allGoodRules resetResult."the resetResult is necessary because it will build a knid of cache of the resultand this cannot be done automatically (for example you may want to run several rules without invalidating the results). "checker := SmalllintManifestChecker new	runRules: rules onPackage: (RPackageOrganizer default packageNamed: #'Manifest-Core').!!SmalllintManifestChecker methodsFor: 'manifest'!isToDo: aCritic forRuleId: ruleId versionId: versionId 		| mb |	mb := self manifestBuilderOf: aCritic.	^  mb isNil 		ifTrue: [ false ] 		ifFalse: [ mb containsToDo: aCritic onRule:  ruleId version: versionId ]! !!SmalllintManifestChecker methodsFor: 'manifest'!isFalsePositive: aCritic forRuleId: ruleId versionId: versionId	| mb |	mb := self manifestBuilderOf: aCritic.	^  mb isNil 		ifTrue: [ false ] 		ifFalse: [ mb isFalsePositive: aCritic onRule: ruleId version: versionId ]! !!SmalllintManifestChecker methodsFor: 'manifest'!cleanAllManifest	| manifests |	manifests := environment packages collect: [ :cl | self builderManifestClass of: cl ] as: Set.	manifests do: [ :each | each cleanUp ]! !!SmalllintManifestChecker methodsFor: 'manifest'!falsePositiveOf: aRule		|critics rId rV  mb |	critics := self criticsOf: aRule. 	rId := aRule class uniqueIdentifierName.	rV := aRule class identifierMinorVersionNumber.	^ critics select: [ :critic | mb := self manifestBuilderOf: critic.						mb isNil 							ifTrue: [ false ] 							ifFalse: [ mb isFalsePositive: critic onRule:  rId version: rV ]]	! !!SmalllintManifestChecker methodsFor: 'manifest'!rejectClassesOf: aPackage			| mb |	mb := self manifestBuilderOf: aPackage.	^  mb isNil 		ifTrue: [{}] 		ifFalse: [ mb rejectClasses ]! !!SmalllintManifestChecker methodsFor: 'manifest'!rejectRulesOf: aPackage			| mb |	mb := self manifestBuilderOf: aPackage.	^  mb isNil 		ifTrue: [{}] 		ifFalse: [ mb rejectRules]	! !!SmalllintManifestChecker methodsFor: 'manifest'!toDoOf: aRule		|critics rId rV mb |	critics := self criticsOf: aRule. 	rId := aRule class uniqueIdentifierName.	rV := aRule class identifierMinorVersionNumber.	^ critics select: [:critic |		mb := (self manifestBuilderOf: critic).		mb isNil 			ifTrue: [ false ] 			ifFalse: [ mb containsToDo: critic onRule:  rId version: rV ]]		! !!SmalllintManifestChecker methodsFor: 'manifest'!isTruePositive: aCritic forRuleId: ruleId versionId: versionId 		^ (self manifestBuilderOf: aCritic)			containsTruePositive: aCritic onRule:  ruleId version: versionId! !!SmalllintManifestChecker methodsFor: 'initialization'!initialize	super initialize.	manifestClassCache := Dictionary new.! !!SmalllintManifestChecker methodsFor: 'accessing'!rule	^ rule! !!SmalllintManifestChecker methodsFor: 'accessing'!manifestBuilderOfPackage: aPackage	| key |	key := aPackage packageName.	^ manifestClassCache		at: key		ifAbsentPut: [ 			(self builderManifestClass hasPackageNamed: key)				ifTrue: [ self builderManifestClass ofPackageNamed: key ]				ifFalse: [ nil ] ]! !!SmalllintManifestChecker methodsFor: 'accessing'!manifestBuilderOfMethod: aMethod	| key cl |	cl := aMethod methodClass.	key := cl name , aMethod category asString.	^ manifestClassCache		at: key		ifAbsentPut: [ 			(self builderManifestClass hasManifestFor: aMethod)				ifTrue: [ self builderManifestClass of: aMethod ]				ifFalse: [ nil ] ]! !!SmalllintManifestChecker methodsFor: 'accessing'!criticsOf: aRule	| rules |		rules := rule leaves 		detect: [:r | r class = aRule class]		ifNone: [ ^ #() ].	^ rules critics! !!SmalllintManifestChecker methodsFor: 'accessing'!manifestBuilderOfClass: aClass	| key |	key := aClass instanceSide category.	^ manifestClassCache		at: key		ifAbsentPut: [ 			(self builderManifestClass hasManifestFor: aClass)				ifTrue: [ self builderManifestClass of: aClass ]				ifFalse: [ nil ] ]! !!SmalllintManifestChecker methodsFor: 'accessing'!builderManifestClass	^ TheManifestBuilder! !!SmalllintManifestChecker methodsFor: 'accessing'!manifestBuilderOf: aPackage	^ aPackage manifestBuilderForRuleChecker: self	! !!SmalllintManifestChecker methodsFor: 'actions'!runRules: aCompositeRule onPackage: aPackage	rule := aCompositeRule.	environment := RBPackageEnvironment package: aPackage.	self run.! !!SmalllintManifestChecker methodsFor: 'actions'!runRules: aCompositeRule onPackage: aPackage withoutTestCase: avoidTestCases	rule := aCompositeRule.	environment := RBPackageEnvironment package: aPackage.		environment := environment withoutClasses: (environment classes select: #isManifest).	avoidTestCases 		ifTrue: [ environment := environment withoutClasses: (environment classes select: #isTestCase) ].	self run! !AbstractTool subclass: #TheManifestBuilder	instanceVariableNames: 'manifestClass'	classVariableNames: ''	poolDictionaries: ''	category: 'Manifest-Core-Base'!!TheManifestBuilder commentStamp: '' prior: 0!I'm a tool to build manifest that handles small lint false positive and other information.My name is strange but this is to avoid to match with a Manifest class which is recognized because it starts with Manifest*.!!TheManifestBuilder methodsFor: 'private'!buildArrayString: aCollection		^ String streamContents: [:stream | 		stream << '#('.		aCollection do: [:each |  			stream  nextPutAll: '#('.			stream nextPutAll: each first printString.			stream  nextPutAll: ' '.			stream nextPutAll: (each at: 2) asSymbol  printString.			stream  nextPutAll: ') '.].		stream << ')']! !!TheManifestBuilder methodsFor: 'private'!dateOf: ringobject forSelector: aSelector	| critics |	critics := self manifest perform: aSelector.	^ ((critics detect: [:each | ((self browsedEnvironment at: each first first) manifestReadOn: (each first at: 2)) = ringobject ]) at: 2) asDateAndTime				! !!TheManifestBuilder methodsFor: 'private'!selectorFalsePositiveOf: ruleId version: versionId	^ (self class falsePositiveBeginningTag, ruleId,		self class falsePositiveMiddleTag, versionId asString,		self class falsePositiveEndTag) 			asSymbol.! !!TheManifestBuilder methodsFor: 'private'!selectorToDoOf: ruleId version: versionId	^ (self class toDoBeginningTag, ruleId ,		self class toDoMiddleTag, versionId asString,		self class toDoEndTag) asSymbol.! !!TheManifestBuilder methodsFor: 'private'!addItem: fp selector: selector	self addAllItem: {fp} selector: selector! !!TheManifestBuilder methodsFor: 'private'!addAllItem: aSet selector: selector	| set newSet arrayString |	set := (self manifest perform: selector) asOrderedCollection.	newSet := aSet \ (self unwrap: set).	newSet isEmpty		ifTrue: [ ^ self ].	set addAll:			(newSet				collect: [ :fp | 					{(fp asRingDefinition arrayStringForManifest).					(DateAndTime current asString)} ]).	arrayString := self buildArrayString: set.	self compileSelector: selector returnValue: arrayString! !!TheManifestBuilder methodsFor: 'private'!packageNameOf: elem	^ elem package name! !!TheManifestBuilder methodsFor: 'private'!compileSelector: selector returnValue: aLiteral	self 		compileSelector: selector		returnValue: aLiteral		classified: 'code-critics'! !!TheManifestBuilder methodsFor: 'private'!removeObsoleteFalsePositiveOf: aMethod	| set arrayString  |	set := (self manifest perform: aMethod selector) asOrderedCollection.	set := set select: [ :each | ((self browsedEnvironment at: each first first) manifestReadOn:  (each first at: 2)) isDefined ].	arrayString := self buildArrayString: set.	self compileSelector: aMethod selector returnValue: arrayString	! !!TheManifestBuilder methodsFor: 'private'!removeItem: fp selector: selector	self removeAllItem: {fp} selector: selector! !!TheManifestBuilder methodsFor: 'private'!selectorTruePositiveOf: ruleId version: versionId	^ (self class falsePositiveBeginningTag, ruleId ,		self class falsePositiveMiddleTag, versionId asString,		self class truePositiveEndTag) 		asSymbol.! !!TheManifestBuilder methodsFor: 'private'!removeAllItem: aSet selector: selector	| set arrayString |	set := (self manifest perform: selector) asOrderedCollection.	set := set		reject: [ :each | 			| tmp |			tmp := (self browsedEnvironment at: each first first) manifestReadOn: (each first at: 2).			aSet anySatisfy: [ :fp | tmp = fp asRingDefinition ] ].	arrayString := self buildArrayString: set.	self compileSelector: selector returnValue: arrayString! !!TheManifestBuilder methodsFor: 'private'!compileSelector: selector returnValue: aLiteral classified: aProtocolName	| source |	source := String streamContents: [ :stream | 		stream 			nextPutAll: selector asString;			nextPut: Character cr;			nextPut: Character tab;			nextPutAll: '^ ';			nextPutAll: aLiteral ].	manifestClass class		compile: source		classified: aProtocolName! !!TheManifestBuilder methodsFor: 'private'!unwrap: aCollection	| unwrapCollection rgobject |		unwrapCollection := OrderedCollection new.	aCollection		do: [ :each | 			rgobject := (self browsedEnvironment at: each first first) manifestReadOn:  (each first at: 2).			(rgobject isClass and: [ rgobject  realClass notNil ])				ifTrue: [ unwrapCollection add: rgobject realClass ].			(rgobject isMethod and: [ rgobject method notNil ])				ifTrue: [ unwrapCollection add: rgobject method ].			(rgobject isPackage and: [ rgobject realPackage notNil ])				ifTrue: [ unwrapCollection add: rgobject realPackage ] ].	^ unwrapCollection! !!TheManifestBuilder methodsFor: '*Tool-DependencyAnalyser-UI'!addManuallyResolvedDependency: aPackageName	| packageNames |			packageNames := self manifest manuallyResolvedDependencies asSet.	packageNames add: aPackageName asSymbol.	packageNames := packageNames asArray.	self 		compileSelector: #manuallyResolvedDependencies		returnValue: packageNames asString		classified: 'meta-data - dependency analyser'! !!TheManifestBuilder methodsFor: 'manifest'!rejectRules	^ self manifest rejectRules	! !!TheManifestBuilder methodsFor: 'manifest'!containsRejectedRule: aRuleId		^ self rejectRules anySatisfy: [ :fp | fp = aRuleId ]! !!TheManifestBuilder methodsFor: 'manifest'!containsRejectedClass: aClass		^ self rejectClasses anySatisfy: [ :cl | cl = aClass ]! !!TheManifestBuilder methodsFor: 'manifest'!containsFalsePositive: aItem onRule: ruleId version: versionId	^  (self hasFalsePositiveOf: ruleId version: versionId) 			and: [ (self falsePositiveOf: ruleId version: versionId) anySatisfy: [ :fp | fp = aItem ]] ! !!TheManifestBuilder methodsFor: 'manifest'!truePositiveOf: ruleId version: versionId 	^ self unwrap: (self manifest perform: (self selectorTruePositiveOf: ruleId version: versionId))! !!TheManifestBuilder methodsFor: 'manifest'!dateOfToDo: aItem onRule: ruleId version: versionId		 (self hasToDoOf: ruleId version: versionId)		ifFalse: [^ self].	^ self dateOf: ( aItem asRingDefinition) forSelector:  (self selectorToDoOf: ruleId version: versionId)				! !!TheManifestBuilder methodsFor: 'manifest'!falsePositiveOf: ruleId version: versionId 	^ self unwrap: (self manifest perform: (self selectorFalsePositiveOf: ruleId version: versionId))! !!TheManifestBuilder methodsFor: 'manifest'!hasToDoOf: ruleId version: versionId	^ self manifest respondsTo: (self selectorToDoOf: ruleId version: versionId)  	! !!TheManifestBuilder methodsFor: 'manifest'!toDoOf: ruleId version: versionId 	^ self unwrap: (self manifest perform: (self selectorToDoOf: ruleId version: versionId))! !!TheManifestBuilder methodsFor: 'manifest'!containsToDo: aItem onRule: ruleId version: versionId	^  (self hasToDoOf: ruleId version: versionId) 		and: [(self toDoOf: ruleId version: versionId) 			anySatisfy: [ :fp| fp = aItem ]] ! !!TheManifestBuilder methodsFor: 'manifest'!createManifestOf: elem	self createManifestNamed: (self packageNameOf: elem).! !!TheManifestBuilder methodsFor: 'manifest'!installToDoOf: ruleId version: versionId	self compileSelector: (self selectorToDoOf: ruleId version: versionId) returnValue: '#()'! !!TheManifestBuilder methodsFor: 'manifest'!installFalsePositiveOf: ruleId version: versionId	self compileSelector: (self selectorFalsePositiveOf: ruleId version: versionId) returnValue: '#()'! !!TheManifestBuilder methodsFor: 'manifest'!rejectClasses	^ self unwrap: (self manifest rejectClasses)! !!TheManifestBuilder methodsFor: 'manifest'!dateOfTruePositive: aItem onRule: ruleId version: versionId	(self hasTruePositiveOf: ruleId version: versionId)		ifFalse: [^ self].	^ self dateOf: ( aItem asRingDefinition) forSelector:  (self selectorTruePositiveOf: ruleId version: versionId)				! !!TheManifestBuilder methodsFor: 'manifest'!createManifestNamed: packageName	|tag|	tag := self class manifestTag.	manifestClass := PackageManifest subclass: (tag, packageName onlyLetters) asSymbol			instanceVariableNames: ''			classVariableNames: ''			poolDictionaries: ''			package: packageName.	manifestClass 		tagWith: tag;		comment: self class manifestClassComment.	^ manifestClass! !!TheManifestBuilder methodsFor: 'manifest'!dateOfFalsePositive: aItem onRule: ruleId version: versionId	(self hasFalsePositiveOf: ruleId version: versionId)		ifFalse: [^ self].			^ self dateOf: ( aItem asRingDefinition) forSelector:  (self selectorFalsePositiveOf: ruleId version: versionId)				! !!TheManifestBuilder methodsFor: 'manifest'!installTruePositiveOf: ruleId version: versionId		self compileSelector: (self selectorTruePositiveOf: ruleId version: versionId) returnValue: '#()'! !!TheManifestBuilder methodsFor: 'manifest'!isFalsePositive: anItem onRule: ruleId version: versionId		^ ((self containsFalsePositive: anItem onRule: ruleId version: versionId) or:			[(self containsRejectedRule: ruleId) or:				[(anItem class = RPackage) not and: [self containsRejectedClass: anItem criticClass]]])! !!TheManifestBuilder methodsFor: 'manifest'!hasFalsePositiveOf: ruleId version: versionId	^ self manifest respondsTo: (self selectorFalsePositiveOf: ruleId version: versionId)! !!TheManifestBuilder methodsFor: 'manifest'!hasTruePositiveOf: ruleId version: versionId	^ self manifest respondsTo: (self selectorTruePositiveOf: ruleId version: versionId)  	! !!TheManifestBuilder methodsFor: 'manifest'!containsTruePositive: aItem onRule: ruleId version: versionId	^  (self hasTruePositiveOf: ruleId version: versionId) 		and: [(self truePositiveOf: ruleId version: versionId) anySatisfy: [ :fp| fp = aItem ]] ! !!TheManifestBuilder methodsFor: '*renraku'!bansRule: aRule for: anEntity	| name number |	  name := aRule class name.	number := aRule class identifierMinorVersionNumber.		^ self		containsFalsePositive: anEntity onRule: name version: number! !!TheManifestBuilder methodsFor: '*renraku'!banRule: aRule for: anEntity	| name number |	  name := aRule class name.	number := aRule class identifierMinorVersionNumber.	(self hasFalsePositiveOf: name version: number) ifFalse: [ 		self installFalsePositiveOf: name version: number ].		self		addFalsePositive: anEntity		of: name		version: number! !!TheManifestBuilder methodsFor: 'accessing'!browsedEnvironment	^manifestClass environment ! !!TheManifestBuilder methodsFor: 'accessing'!manifestClass: aClass	 manifestClass := aClass		! !!TheManifestBuilder methodsFor: 'accessing'!manifestOf: elem	^ manifestClass := elem package ifNotNil: #packageManifestOrNil ! !!TheManifestBuilder methodsFor: 'accessing'!manifest	^ manifestClass! !!TheManifestBuilder methodsFor: 'printing'!printOn: aStream	aStream		nextPutAll: 'ManifestBuilder of ';		nextPutAll: manifestClass printString.! !!TheManifestBuilder methodsFor: 'adding/removing'!addFalsePositive: fp of: ruleId version: versionId	| selector |	selector := self selectorFalsePositiveOf: ruleId version: versionId. 	self addItem: fp selector: selector.		(self containsToDo: fp onRule: ruleId version: versionId)		ifTrue: [self removeToDo: fp of:  ruleId version: versionId]. ! !!TheManifestBuilder methodsFor: 'adding/removing'!removeRejectClass: aClass	|  classes |	classes :=  self manifest rejectClasses asOrderedCollection.	classes := classes reject: [ :each | 			((self browsedEnvironment at: each first first) manifestReadOn:  (each first at: 2)) =  aClass asRingDefinition ].		self compileSelector: (self class rejectClassesTag) returnValue:  (self buildArrayString: classes)	! !!TheManifestBuilder methodsFor: 'adding/removing'!removeRejectRule: ruleId 	|  nfp |		nfp := self manifest rejectRules asOrderedCollection.	nfp remove: ruleId ifAbsent: [^ self].	nfp := nfp asArray.	self compileSelector: (self class rejectRulesTag) returnValue:   nfp asString	! !!TheManifestBuilder methodsFor: 'adding/removing'!removeAllToDo: fp of: ruleId version: versionId		| selector |	selector := self selectorToDoOf: ruleId version: versionId. 	self removeAllItem: fp selector: selector.	! !!TheManifestBuilder methodsFor: 'adding/removing'!addAllToDo: aSet of: ruleId version: versionId	| selector |	selector := self selectorToDoOf: ruleId version: versionId. 	self addAllItem: aSet selector: selector. ! !!TheManifestBuilder methodsFor: 'adding/removing'!removeAllManifest 	self removeClasses: (self class allManifestClasses)! !!TheManifestBuilder methodsFor: 'adding/removing'!cleanUp	| tagfp |	tagfp := self class falsePositiveBeginningTag.	self manifest class methodsDo: [ :method |		(method selector asString beginsWith: tagfp)				ifTrue: [self removeObsoleteFalsePositiveOf: method] ]		! !!TheManifestBuilder methodsFor: 'adding/removing'!resetFalsePositiveOf: ruleId version: versionId 	self  installFalsePositiveOf: ruleId version: versionId. ! !!TheManifestBuilder methodsFor: 'adding/removing'!addAllFalsePositive: fp of: ruleId version: versionId	| selector  |		selector := self selectorFalsePositiveOf: ruleId version: versionId. 	self addAllItem: fp selector: selector.	fp do: [:each |		 (self containsToDo: each onRule: ruleId version: versionId)		ifTrue: [ self removeToDo: each of:  ruleId version: versionId ]]	! !!TheManifestBuilder methodsFor: 'adding/removing'!addRejectRule: ruleId 	|  nfp |		nfp := self manifest rejectRules asSet.	nfp add: ruleId.	nfp := nfp asArray.	self compileSelector: (self class rejectRulesTag) returnValue: nfp asString! !!TheManifestBuilder methodsFor: 'adding/removing'!addTruePositive: fp of: ruleId version: versionId	| selector  |		selector := self selectorTruePositiveOf: ruleId version: versionId. 	self addItem: fp selector: selector.	(self containsToDo: fp onRule: ruleId version: versionId)		ifTrue: [ self removeToDo: fp of:  ruleId version: versionId ]. 	(self containsFalsePositive: fp onRule: ruleId version: versionId)		ifTrue: [ self removeFalsePositive: fp of:  ruleId version: versionId ]		! !!TheManifestBuilder methodsFor: 'adding/removing'!addToDo: fp of: ruleId version: versionId	| selector |		selector := self selectorToDoOf: ruleId version: versionId. 	self addItem: fp selector: selector.	(self containsFalsePositive: fp onRule: ruleId version: versionId)		ifTrue: [ self removeFalsePositive: fp of:  ruleId version: versionId ]! !!TheManifestBuilder methodsFor: 'adding/removing'!addRejectClass: aClass	|  falsePositives |	falsePositives := self manifest rejectClasses asOrderedCollection .	((self unwrap: falsePositives) anySatisfy: [:each | each = aClass])		ifTrue: [ ^ self ].	falsePositives add: {aClass asRingDefinition arrayStringForManifest. DateAndTime current asString}.	self compileSelector:  (self class rejectClassesTag) returnValue: (self buildArrayString: falsePositives)		! !!TheManifestBuilder methodsFor: 'adding/removing'!removeAllFalsePositive: aSet of: ruleId version: versionId	| selector |	selector := self selectorFalsePositiveOf:ruleId version: versionId. 	self removeAllItem: aSet selector: selector.	! !!TheManifestBuilder methodsFor: 'adding/removing'!resetToDoOf: ruleId version: versionId 		self installToDoOf: ruleId version: versionId. ! !!TheManifestBuilder methodsFor: 'adding/removing'!removeManifestOf: aItem		(self manifestOf: aItem) ifNotNil: [ :myManifest | 			self removeClass: myManifest  ]! !!TheManifestBuilder methodsFor: 'adding/removing'!removeFalsePositive: fp of: ruleId version: versionId		| selector |	selector := self selectorFalsePositiveOf: ruleId version: versionId. 	self removeItem: fp selector: selector.		! !!TheManifestBuilder methodsFor: 'adding/removing'!removeToDo: fp of: ruleId version: versionId		| selector |	selector := self selectorToDoOf:ruleId version: versionId. 	self removeItem: fp selector: selector.	! !!TheManifestBuilder methodsFor: 'comparing'!hash	^ manifestClass hash bitXor: self class hash! !!TheManifestBuilder methodsFor: 'comparing'!= aObject	^ aObject class = self class and: [ self manifest = aObject manifest ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TheManifestBuilder class	instanceVariableNames: ''!!TheManifestBuilder class methodsFor: 'instance creation'!hasManifestFor: aItem	^  (self new manifestOf: aItem) isNil not		! !!TheManifestBuilder class methodsFor: 'instance creation'!hasPackageNamed: aPackageName	^ self allManifestClasses 		anySatisfy: [:each | each category = aPackageName  ]	! !!TheManifestBuilder class methodsFor: 'instance creation'!of: aItem	| mb  |	mb := self new. 	(mb manifestOf: aItem) 			ifNil: [mb createManifestOf: aItem].		^ mb	! !!TheManifestBuilder class methodsFor: 'instance creation'!ofPackageNamed: aPackageName	| builder |	builder := self new.	self allManifestClasses		detect: [ :each | each category = aPackageName ]		ifFound: [ :manifestClass | builder manifestClass: manifestClass ]		ifNone: [ builder createManifestNamed: aPackageName ].	^ builder! !!TheManifestBuilder class methodsFor: 'utilities'!truePositiveEndTag	"the string that identifies uniquely the end of a selector who give  the set of false positive for a rule"		^ 'TruePositive'! !!TheManifestBuilder class methodsFor: 'utilities'!falsePositiveMiddleTag	"the string that identifies uniquely the middle of a selector who give  the set of false positive for a rule"		^ 'V'! !!TheManifestBuilder class methodsFor: 'utilities'!toDoMiddleTag	"the string that identifies uniquely the middle of a selector who give  the set of TODO for a rule"		^ 'V'! !!TheManifestBuilder class methodsFor: 'utilities'!rejectClassesTag	"the string that identifies uniquely the beginning of a selector who give  the set of rejected classes"		^ 'rejectClasses'! !!TheManifestBuilder class methodsFor: 'utilities'!rejectRulesTag	"the string that identifies uniquely the beginning of a selector who give  the set of rejected rules"		^ 'rejectRules'! !!TheManifestBuilder class methodsFor: 'utilities'!toDoEndTag	"the string that identifies uniquely the end of a selector who give  the set of TODO for a rule"		^ 'TODO'! !!TheManifestBuilder class methodsFor: 'utilities'!manifestClassComment		^ 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser'! !!TheManifestBuilder class methodsFor: 'utilities'!falsePositiveEndTag	"the string that identifies uniquely the end of a selector who give  the set of false positive for a rule"		^ 'FalsePositive'! !!TheManifestBuilder class methodsFor: 'utilities'!falsePositiveBeginningTag	"the string that identifies uniquely the beginning of a selector who give  the set of false positive for a rule"		^ 'rule'! !!TheManifestBuilder class methodsFor: 'utilities'!allManifestClasses	^ PackageManifest subclasses! !!TheManifestBuilder class methodsFor: 'utilities'!toDoBeginningTag	"the string that identifies uniquely the beginning of a selector who give  the set of TODO for a rule"		^ 'rule'! !!TheManifestBuilder class methodsFor: 'utilities'!manifestTag	"the string that identifies uniquely the beginning of a Manifest class name"		^ 'Manifest'! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.343234 pm'!!Metaclass methodsFor: '*Manifest-Core'!criticTheNonMetaclassClass	^self instanceSide ! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.344668 pm'!!CompiledMethod methodsFor: '*Manifest-Core'!criticNameOn: aStream	"This behavior may be folded later by changing the name of this method or using another one."		aStream 		<< self methodClass name 		<< '>>#' 		<< self selector  		<< ' (' 		<< self methodClass instanceSide category 		<< ')'! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.345734 pm'!!CompiledMethod methodsFor: '*Manifest-Core'!criticTheNonMetaclassClass	"Return the class of the receiver for the critic browser. This behavior may be folded later by changing the name of this method or using another one."		^ self methodClass instanceSide! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.3459 pm'!!CompiledMethod methodsFor: '*Manifest-Core'!manifestBuilderForRuleChecker: aRuleChecker	"Return the manifestsince the rulechecker is keeping a cache, we ask it back"	^ aRuleChecker manifestBuilderOfMethod: self! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.346341 pm'!!CompiledMethod methodsFor: '*Manifest-Core'!mcWorkingCopy	 MCWorkingCopy managersForClass: self methodClass selector: self selector do: [ :package | ^ package ]! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.346771 pm'!!CompiledMethod methodsFor: '*Manifest-Core'!criticClass	"Return the class of the receiver for the critic browser. This behavior may be folded later by changing the name of this method or using another one."		^ self methodClass! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.346876 pm'!!ClassDescription methodsFor: '*Manifest-Core'!criticNameOn: aStream	"This behavior may be folded later by changing the name of this method or using another one."		aStream 		<< self name 		<< ' (' 		<< self category 		<< ')' ! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.347364 pm'!!ClassDescription methodsFor: '*Manifest-Core'!manifestBuilderForRuleChecker: aRuleChecker	"Return the manifestsince the rulechecker is keeping a cache, we ask it back"	^ aRuleChecker manifestBuilderOfClass: self! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.347844 pm'!!ClassDescription methodsFor: '*Manifest-Core'!mcWorkingCopy	MCWorkingCopy managersForClass:  self do: [: package | ^ package ]! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.348307 pm'!!ClassDescription methodsFor: '*Manifest-Core'!criticClass	"Return the class of the receiver for the critic browser. This behavior may be folded later by changing the name of this method or using another one."		^ self! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.348406 pm'!'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.354209 pm'!!RGMethodDefinition methodsFor: '*Manifest-Core'!storeOn: aStream	aStream nextPut: $(.	aStream nextPutAll: self class asString.	aStream nextPutAll: ' className: '''.	aStream nextPutAll: self parentName.	aStream nextPutAll: ''' selector: '.	aStream nextPutAll: self selector printString.	aStream nextPutAll: ' isMetaSide: '.	aStream nextPutAll: self isMetaSide printString.	aStream nextPut: $)! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.354772 pm'!!RGMethodDefinition methodsFor: '*Manifest-Core'!arrayStringForManifest	| array |	array := Array new:2.	array at: 1 put:  (self class asString asSymbol).	array at: 2 put: {self parentName asSymbol.  self selector asSymbol. self isMetaSide asString  asSymbol}.	^ array 	 ! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.354875 pm'!!RPackage methodsFor: '*Manifest-Core'!isDeprecated	^self packageManifestOrNil 		ifNil: [ ^false ]		ifNotNil: [ :manifest | manifest isDeprecated ]! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.355273 pm'!!RPackage methodsFor: '*Manifest-Core'!packageComment: aDescription	^ self packageManifest		ifNil: [ '' ]		ifNotNil: [ :manifest | manifest comment: aDescription stamp: Author changeStamp]! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.355357 pm'!!RPackage methodsFor: '*Manifest-Core'!packageManifest	^ self definedClasses		detect: [ :each | each isManifest ]		ifNone: [ TheManifestBuilder new createManifestNamed: name]! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.355767 pm'!!RPackage methodsFor: '*Manifest-Core'!packageManifestOrNil	^ self definedClasses		detect: [ :each | each isManifest ]		ifNone: [ nil ]! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.355848 pm'!!RPackage methodsFor: '*Manifest-Core'!criticNameOn: aStream	"This behavior may be folded later by changing the name of this method or using another one."		aStream << self packageName ! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.35594 pm'!!RPackage methodsFor: '*Manifest-Core'!manifestBuilderForRuleChecker: aRuleChecker	"Return the manifestsince the rulechecker is keeping a cache, we ask it back"	^ aRuleChecker manifestBuilderOfPackage: self! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.356356 pm'!!RPackage methodsFor: '*Manifest-Core'!packageComment	^ self packageManifestOrNil ifNil: [ '' ] ifNotNil: [ :manifest | manifest comment ]! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.356478 pm'!!ClassTestCase methodsFor: '*Manifest-Core'!assertValidLintRule: aLintRule	| runner |	runner := ReSmalllintChecker new.	runner 		rule: {aLintRule};		environment: self targetClassEnvironment;		run.	self		assert: (runner criticsOf: aLintRule) isEmpty		description: [ aLintRule rationale ]! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.35852 pm'!!ClassTestCase methodsFor: '*Manifest-Core'!targetClassEnvironment	^RBClassEnvironment class: self targetClass.! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.358976 pm'!!RGMetaclassDefinition class methodsFor: '*Manifest-Core'!manifestReadOn: aArray	^ (self named:( aArray at:1))		baseClass: (RGClassDefinition named: (aArray at:2))! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.360266 pm'!!RGMethodDefinition class methodsFor: '*manifest-core'!manifestReadOn: aArray 	^ self className:  (aArray at: 1) 		selector: (aArray at: 2)		isMetaSide: ((aArray at: 3) = #true)   		! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.360356 pm'!!RGClassDescriptionDefinition class methodsFor: '*manifest-core'!manifestReadOn: aArray	^ self named:( aArray first)! !'From Pharo7.0.2 of 5 March 2019 [Build information: Pharo-7.0.2+build.152.sha.890f474a81f116ead0e68c8de77790aef4e9a752 (64 Bit)] on 10 March 2019 at 5:12:44.360903 pm'!!RGPackage class methodsFor: '*Manifest-Core'!manifestReadOn: aArray	^ self named:( aArray first)! !